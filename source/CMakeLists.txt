cmake_minimum_required(VERSION 3.15)

project(grey VERSION 1.0.0 DESCRIPTION "grey")

set(TARGET grey)

# Set C standard
set(CMAKE_C_STANDARD 23)
set(CMAKE_C_STANDARD_REQUIRED ON)

include(../common.cmake)

# Option to enable or disable phony main
option(BUILD_PHONY_MAIN "Build phony main" ON)

message(STATUS "Compiler: ${CMAKE_C_COMPILER_ID}")
message(STATUS "System Processor: ${CMAKE_SYSTEM_PROCESSOR}")

include(ExternalProject)

find_package(memalloc QUIET)
if(NOT TARGET memalloc::memalloc)
  message(STATUS "memalloc not found, adding as ExternalProject")
  ExternalProject_Add(
    MemAlloc
    GIT_REPOSITORY "https://github.com/iudah/memalloc.git"
    GIT_TAG origin/master
    GIT_SHALLOW TRUE
    INSTALL_DIR ${CMAKE_BINARY_DIR}/memalloc
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR> -DBUILD_EXECUTABLE=OFF
    BUILD_ALWAYS OFF
    STAMP_DIR ${CMAKE_BINARY_DIR}/stamps
    UPDATE_DISCONNECTED TRUE
    BUILD_BYPRODUCTS "${CMAKE_BINARY_DIR}/memalloc/lib/${CMAKE_STATIC_LIBRARY_PREFIX}memalloc${CMAKE_STATIC_LIBRARY_SUFFIX}"
  )

  file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/memalloc/include")

  add_library(memalloc_imported STATIC IMPORTED)
  add_dependencies(memalloc_imported MemAlloc)
  set_target_properties(memalloc_imported PROPERTIES
    IMPORTED_LOCATION "${CMAKE_BINARY_DIR}/memalloc/lib/${CMAKE_STATIC_LIBRARY_PREFIX}memalloc${CMAKE_STATIC_LIBRARY_SUFFIX}"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_BINARY_DIR}/memalloc/include"
  )
  add_library(memalloc::memalloc ALIAS memalloc_imported)
endif()

find_package(zot QUIET)
if(NOT TARGET zot::zot)
  message(STATUS "zot not found, adding as ExternalProject")
  ExternalProject_Add(
    zot
    GIT_REPOSITORY "https://github.com/iudah/zot.git"
    GIT_TAG origin/main
    GIT_SHALLOW TRUE
    INSTALL_DIR ${CMAKE_BINARY_DIR}/zot
    CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR> -DBUILD_EXECUTABLE=OFF
    BUILD_ALWAYS OFF
    STAMP_DIR ${CMAKE_BINARY_DIR}/stamps
    UPDATE_DISCONNECTED TRUE
    BUILD_BYPRODUCTS "${CMAKE_BINARY_DIR}/zot/lib/${CMAKE_STATIC_LIBRARY_PREFIX}zot${CMAKE_STATIC_LIBRARY_SUFFIX}"
  )

  file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/zot/include")

  add_library(zot_imported STATIC IMPORTED)
  add_dependencies(zot_imported zot MemAlloc)
  set_target_properties(zot_imported PROPERTIES
    IMPORTED_LOCATION "${CMAKE_BINARY_DIR}/zot/lib/${CMAKE_STATIC_LIBRARY_PREFIX}zot${CMAKE_STATIC_LIBRARY_SUFFIX}"
    INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_BINARY_DIR}/zot/include"
  )
  add_library(zot::zot ALIAS zot_imported)
endif()

include(sources.cmake)
include(headers.cmake)

add_library(${TARGET} SHARED ${SOURCE_FILES} ${HEADER_FILES})
add_library(grey::${TARGET} ALIAS ${TARGET})

target_include_directories(${TARGET}
  PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/>
  $<INSTALL_INTERFACE:include>
)
target_link_libraries(${TARGET} PUBLIC memalloc::memalloc)
target_link_libraries(${TARGET} PUBLIC zot::zot)
target_compile_features(${TARGET} PUBLIC c_std_23)

if(CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
  if(MSVC)
    target_compile_options(${TARGET} PRIVATE /Zi /Od /RTC1)
    target_link_options(${TARGET} PRIVATE /DEBUG)
  else()
    target_compile_options(${TARGET} PRIVATE -g -O0 -fno-omit-frame-pointer)
  endif()
  if(ENABLE_SANITIZERS AND NOT MSVC)
    target_compile_options(${TARGET} PRIVATE -fsanitize=address -fsanitize=undefined)
    target_link_options(${TARGET} PRIVATE -fsanitize=address -fsanitize=undefined)
  endif()
endif()

if((CMAKE_SYSTEM_PROCESSOR MATCHES "arm" OR CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64") AND NOT MSVC)
  include(CheckCCompilerFlag)
  check_c_compiler_flag("-mfpu=neon" HAS_NEON_FLAG)
  if(HAS_NEON_FLAG)
    target_compile_options(${TARGET} PRIVATE -mfpu=neon)
  endif()
endif()

if(BUILD_PHONY_MAIN)
  # Generate phony main at configure time
  file(WRITE ${CMAKE_BINARY_DIR}/grey_phony_main.c "int game_main();\nint main() { game_main(); return 0; }\n")
  add_executable(grey_phony ${CMAKE_BINARY_DIR}/grey_phony_main.c)
  target_link_libraries(grey_phony PRIVATE ${TARGET})
endif()

include(GNUInstallDirs)

install(TARGETS ${TARGET}
  EXPORT GreyTargets
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

install(FILES ${HEADER_FILES} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

install(EXPORT GreyTargets
  FILE grey-config.cmake
  NAMESPACE grey::
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/grey)

export(EXPORT GreyTargets
  FILE "${CMAKE_BINARY_DIR}/grey-config.cmake")
